var ctrlDown;

$(document).ready(function() {
	//Used to check if control is pressed
	initCtrlEventListener();
	
	//Form elements
	formControlEventbinding();

	//Accordions
	initAccordions();

	//Skip nav 
	navigateToMainContentEventBinding();

	//Nav-top
	breakTextOnMenuTabs();

	//Adjustments to the auto generated parts of the DOM
	appendAttributesToAutoGeneratedElements();

	//Event bindings that uses external APIs
	bindEventsThatCallsExternalAPIs();

	//Event bindings used for special validation
	validation();

	//Calculate the width of the buttons in the nav-bar
	calculateAndSetNavButtonWidths();

	//Scrolls the first input with an error into view
	scrollToFirstError();

	//Disables add buttons when maxium number of
	//elements has been added
	disableAddButtonsWhenMaxIsReached();

	//Adjust hrefs for file-download links
	initFileDownloads();

	setAriaAttributesForDeleteButtons();
});

function browserIsIEOnWindowsPhone() {
	return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
}

function initCtrlEventListener() {
	ctrlDown = false;

	$(document).on("keydown", function(event) {
		var key = event.keyCode || event.charCode;
		if (key == 17) {
			ctrlDown = true;
		}
	});

	$(document).on("keyup", function(event) {
		var key = event.keyCode || event.charCode;
		if (key == 17) {
			ctrlDown = false;
		}
	});
}

function initCheckBoxesAndRadios() {
	$(".label_text").on("click", function(e) {
	    if (e.target.localName != "label") {
	    	var $checkbox = $(this).parent().find("input:checkbox");
	    	$checkbox.trigger("click");

	    	var $radio = $(this).parent().find("input:radio");
	    	$radio.trigger("click");
	    }
	});

	var toggleCheck = function($input) {
		if ($input.is(":checked")) {
	        $input.parent().siblings(".label_text").addClass("checked");
	    }
	    else {
	    	$input.parent().siblings(".label_text").removeClass("checked");
	    }
	};

	$(".control input:checkbox").on("change", function() {
		toggleCheck($(this));
	});

	//To ensure that all pseudo-elements are marked as checked when re-visiting a form
	var $checkboxes = $(".control input:checkbox:checked");
	$.each($checkboxes, function() {
		toggleCheck($(this));
	});

	$(".control input:radio").on("change", function() {
		var $allRadiosInFieldset = $(this).closest("fieldset").find("input:radio");
		$.each($allRadiosInFieldset, function() {
			toggleCheck($(this));
		});
	});
	var $radios = $("input:radio");
	$.each($radios, function() {
	  toggleCheck($(this));
	});


	//Focus (for accessibility)
	$(".control input").on("focus", function() {
		$(this).parent().parent().addClass("focused");
	});

	$(".control input").on("blur", function() {
		$(this).parent().parent().removeClass("focused");
	});
}

function initHelptexts() {
	//First hide all the help texts
	var $helpTexts = $(".help-text").hide();
	$helpTexts.attr("aria-hidden", "true");

	var $helpBtns = $(".btn-help");
	$helpBtns.attr("aria-label", "Hva menes med dette?");
	$helpBtns.attr("aria-expanded", "false");

	$.each($helpBtns, function() {
		var $helpElementsForInputs = $(this).closest(".help-elements-for-input").parent();

		var $correspondingDescription = "";

		if($helpElementsForInputs.length) {
			$correspondingDescription = $helpElementsForInputs.find("label:first");
			$correspondingDescription.attr("id", $correspondingDescription.attr("for") + "-" + $correspondingDescription.text().split("*")[0].trim())
		}
		else {
			$correspondingDescription = $(this).closest(".help-elements-for-fieldset").parent().find("legend:first");
			$correspondingDescription.addClass("control-container-tight");
		}
		
		$(this).attr("aria-describedby", $correspondingDescription.attr("id"));
	});

	//Bind evnts 
	$helpBtns.on("click", function() {
		var $helpText = $(this).next(".help-text");

		var $symbol = $(this).find(".symbol");
		var $desc = $(this).find(".desc");

		$helpText.toggle();

		if ($helpText.is(":visible")) {
			$symbol.text("X");
			$helpBtns.attr("aria-label", "Lukk hjelpetekst");
			$helpText.attr("aria-hidden", "false");
			$helpBtns.attr("aria-expanded", "true");
		} 
		else {
			$symbol.text("?");
			$helpBtns.attr("aria-label", "Hva menes med dette?");
			$helpText.attr("aria-hidden", "true");
			$helpBtns.attr("aria-expanded", "false");
		}	
	});
}

//Takes a string and inserts the given
//mask when the function maskHere() returns true
//The parameter x is optional in the function maskHere()
//But is required in this function
function formatAfterInput(str, maxlength, mask, maskHere, x) {
	var valTrimmed = removeWhiteSpaces(str);
	var lastSliceIndex = 0;
	var newVal = "";
	for(var i = x; i < valTrimmed.length; i++) { //Make sure to prevent array out of bounds
		if (maskHere(i, x)) {
			newVal += valTrimmed.substring(lastSliceIndex, i) + mask;
			lastSliceIndex = i;
		}
	}
	newVal += valTrimmed.substring(lastSliceIndex, valTrimmed.length);
	return newVal.substring(0, maxlength);
}

//Pads the given string with a space, by x characters
function padBy(x, str, maxlength) {
	return formatAfterInput(str, maxlength, " ", function(i, x) { return i % x == 0; }, x);
}

function initInputs() {
	//Bring up the numeric keypad for iOS and Android
	$("input.numeric-text").attr("pattern", "[0-9]*"); //iOS
	$("input.numeric-text").attr("inputmode", "numeric"); //Android

	//Clears all non-numeric input from the input field
	//Skips characters defined by the string "exceptions"
	var clearNonNumericInput = function($input, exceptions) {
		if(!browserIsIEOnWindowsPhone()) {
			var txtInput = $input.val();
	        txtInputLastChar = txtInput.charAt(txtInput.length-1);        

			if (!$.isNumeric(txtInputLastChar) && (exceptions == undefined || exceptions.indexOf(txtInputLastChar) < 0)) {
				$input.val(txtInput.substring(0, txtInput.length-1));
			}
		}
	}
	
	$("input.numeric-text").on("keyup", function() {
		clearNonNumericInput($(this));
	});

	//Function used to insert a string at a specific index
	//Used when formatting input immediately when input is entered
	function maskAt(indexStop, mask, $input) {
		if ($input.val().charAt(indexStop - 1) == mask) return;
		$input.val($input.val().substring(0, indexStop) + mask + $input.val().substring(indexStop, parseInt($input.attr("maxlength"))));
	}

	//Checks if key was delete, backspace, arrows, shift, ctrl, tab, home or end key
	function isEditKeyEvent(event) {
		if (ctrlDown) return true;
		var key = event.keyCode || event.charCode;
		if(key != 8 && key != 9 && key != 46 && key != 16 && key != 17 && key != 19 && (key < 35 || key > 40)) return false;
		return true;
	}

	//Function used to determine if a user is typing
	function userIsTyping($element, event) {
		return !isEditKeyEvent(event) && $element.val().length < parseInt($element.attr("maxlength")) && parseInt($element.prop("selectionStart")) == parseInt($element.prop("selectionEnd"));
	}

	//Input masking for norwegian account numbers - regular input (keys)
	$("input.numeric-text.account-mask").on("keydown", function(event) {
		if(!browserIsIEOnWindowsPhone()) {
			var mask = " ";
			//Don't mess with value on delete, backspace, arrows, shift, ctrl, home or end key
	    	if(userIsTyping($(this), event)) {
	    		var thisVal = $(this).val();
				if (thisVal.length == 4 || thisVal.length == 7) {
					maskAt(thisVal.length, mask, $(this));
				}
	    	}
	    	/* TODO!
	    	else if(!isEditKeyEvent(event) && $(this).val().length == parseInt($(this).attr("maxlength"))) {
				if ($(this).val().substring(parseInt($(this).prop("selectionStart")), parseInt($(this).prop("selectionEnd")) + 1).indexOf(mask) > -1 && (parseInt($(this).prop("selectionStart")) == 4 || parseInt($(this).prop("selectionStart")) == 7)) {
					return false;
				}
	    	}*/
    	}
	});
	$("input.account-mask").on("change paste", function() {
    	var $this = $(this);
    	setTimeout(function () {
    		$this.val(formatAfterInput($this.val(), $this.attr("maxlength"), " ", function(i, x) { return i == 4 || i == 6; }, 0));
    	}, 100);
    });

	//Input masking for VPS account numbers - regular input (keys)
	$("input.vps-account-mask").on("keydown", function(event) {
		if(!browserIsIEOnWindowsPhone()) {
			//Don't mess with value on delete, backspace, arrows, shift, ctrl, home or end key
	    	if(userIsTyping($(this), event)) {
	    		var thisVal = $(this).val();
				if (thisVal.length == 5) {
					maskAt(thisVal.length, " ", $(this));
				}
	    	}
    	}
	});
    $("input.vps-account-mask").on("change paste", function() {
    	var $this = $(this);
    	setTimeout(function () {
    		$this.val(formatAfterInput($this.val(), $this.attr("maxlength"), " ", function(i, x) { return i == 5; }, 0));
    	}, 100);
    });

	$('input[type="tel"]').on("keyup", function() {
		clearNonNumericInput($(this), "+-() ");
	});

	//Input masking for phone numbers
	//Sets the following format to the input: {000 00 000}
	//on key down (except for when "edit keys" are pressed)
	$('input[type="tel"]').on("keydown", function(event) {
		if(!browserIsIEOnWindowsPhone()) {
			//Don't mess with value on delete, backspace, arrows, shift, ctrl, home or end key
	    	if(!isEditKeyEvent(event) && $(this).val().length < parseInt($(this).attr("maxlength")) && parseInt($(this).prop("selectionStart")) == parseInt($(this).prop("selectionEnd"))) {
	    		var thisVal = $(this).val();
				var index = thisVal.length - getSplitIndexForPhoneNumber(thisVal);

				if (index == 3 || index == 6 || (index > 9 && (index + 2) % 4 == 0)) {
					maskAt(thisVal.length, " ", $(this));
				}
	    	}
    	}
	});

	//Sets the following format to the input: {000 00 000}
	//on change or paste
	$('input[type="tel"]').on("change paste", function() {
    	var $this = $(this);
    	setTimeout(function () {
    		var prefix = $this.val().substring(0, getSplitIndexForPhoneNumber($this.val()));
    		$this.val(prefix + formatAfterInput($this.val().substring(getSplitIndexForPhoneNumber($this.val()), $this.val().length), $this.attr("maxlength"), " ", function(i, x) {
    			return i == 3 || i == 5 || (i > 7 && (i + 1) % 3 == 0);
    		}, 0));
    	}, 100);
    });

	//Used to set the marker at the end of the prefilled input
	//(e.g ladn code for phone numbers)
	$(".prevent-select-on-tab").on("keyup", function(event)  {
 		var key = event.keyCode || event.charCode;
 		if (key == 9) {
 			$(this).prop("selectionStart", $(this).prop("selectionEnd"));
 		}
 	});

	//Sets the following format to the input: {000 000 000}
	//on key down (except for when "edit keys" are pressed)
	$(".pad-3-by-3").on("keydown", function(event) {
		if(!browserIsIEOnWindowsPhone()) {
			//Don't mess with value on delete, backspace, arrows, shift, ctrl, home or end key
	    	if(userIsTyping($(this), event)) {
	    		var thisVal = $(this).val();
				if ((thisVal.length + 1) % 4 == 0) {
					maskAt(thisVal.length, " ", $(this));
				}
	    	}
    	}
    });

	//Sets the following format to the input: {000 000 000}
	//on change or paste
    $(".pad-3-by-3").on("change paste", function() {
    	var $this = $(this);
    	setTimeout(function () {
    		$this.val(padBy(3, $this.val(), $this.attr("maxlength")));
    	}, 100);
    });

    $(".input-percentage").on("change", function() {
    	var val = parseFloat($(this).val());
    	var max = $(this).attr("max");
    	var min = $(this).attr("min");
    	if(val <= max && val >= min) {
    		$(this).closest(".input-panel").find(".percentage-valid:first").val("true");
    		console.log("DEBUG % is valid");
    	}
    	else {
    		$(this).closest(".input-panel").find(".percentage-valid:first").val("false");	
    		console.log("DEBUG % is NOT valid");
    	}
    	$(this).val(val.toString());
    });
}

function formControlEventbinding() {
	initCheckBoxesAndRadios();
	initHelptexts(); 
	initInputs();
}

//Sets focus (focus()) doesn't work on mobile devices)
function focusMobile($element) {
	$element.on('touchstart', function() {
    	$(this).focus();
  	});
}

//Scrolles selected element into view
function scrollTo($element, delay) {
	if ($element.length > 0) {
		$('html, body').animate({
        	scrollTop: $element.offset().top
    	}, delay);
	}
}

//TODO
function toggleARIAPropertiesForAccordion($accBtn) {
	var expanded = $accBtn.attr("aria-expanded");

	var ariaExpandedAttr = expanded == "false" ? "true" : "false";
	$accBtn.attr("aria-expanded", ariaExpandedAttr);

	var $correspondingPanel = $accBtn.siblings(".panel:first");
	var ariaHiddenAttr = expanded;
	$correspondingPanel.attr("aria-hidden", ariaHiddenAttr);
}


function addARIAPropertiesToAccordion($accBtn) {
	var $correspondingPanel = $accBtn.siblings(".panel:first");

	$accBtn.attr("aria-controls", $correspondingPanel.attr("id"));
	$accBtn.attr("aria-expanded", "false");

	$correspondingPanel.attr("aria-hidden", "true");
}

function initAccordions() {
	var $panels = $(".accordion-container .panel");
	$.each($panels, function() {
		if (!$(this).hasClass("hidden")) {
			$(this).addClass("hidden");
		}
	});

	var $accBtns = $("button.accordion");
	$.each($accBtns, function() {
		addARIAPropertiesToAccordion($(this));
	});

	//Add event handlers to both statically and dynamically generated content
	//(By using #main-content_content as the parent element)
	$("#main-content_content").on("click", "button.accordion", function() {
		$(this).toggleClass("active");
		$(this).siblings(".panel").first().toggleClass("hidden");
		toggleARIAPropertiesForAccordion($(this));
	});

	//If the form has an error, we need to open all the accordions with errors
	if (getFirstError($("#main-content_content")).length) {
		$.each($panels, function() {
			if(getFirstError($(this)).length) {
				var $correspondingButton = $(this).siblings(".accordion:first");
				if (!$correspondingButton.hasClass(".active")) {
					$correspondingButton.click();
				}
			}
		});
	}
	else {//If not, we scroll to and open the last accordion added
		var $lastAccordionContainer = $(".focus-last-child .accordion-container").last();
		var $lastAccordionBtn = $lastAccordionContainer.find(".accordion").first();
		if (!$lastAccordionBtn.hasClass("active")) {
			var blankFormInputs = false;
			$.each($lastAccordionContainer.find("input"), function() {
				if (!$(this).val()) {
					blankFormInputs = true;
					return false;
				}
			});
			if (blankFormInputs) {
				$lastAccordionBtn.click();
				scrollTo($lastAccordionContainer, 1000);
			}
		}
	}
	
	appendAttributesToNumberInputs();

	//Sets the text of the button to the same as the name of
	//the benefitial owner
	var setAccordionBtnTitle = function($accordionContainer) {
		var prefix = '<span class="chev"></span><span class="desc">';
		var suffix = "</span>";
		var title = $accordionContainer.find(".accordion-description").first().val();
		var $button = $accordionContainer.find("button.accordion");
		if (title != "") {
			$button.html(prefix + title + suffix);
		}
		else {
			var idSplit = $button.attr("id").split("_");
			$button.html(prefix + "Reell rettighetshaver " + (idSplit.length > 0 ? idSplit[idSplit.length - 1] : "") + suffix);
		}
	};

	$.each($(".set-name-accordion"), function() {
		setAccordionBtnTitle($(this));
	});

	$(".set-name-accordion .accordion-description").on("change", function() {
		setAccordionBtnTitle($(this).closest(".set-name-accordion"));
	});
}

//TODO
function splitTextElegantly(text, nRows) {
	var words = text.split(" ");
	var nWords = words.length;
	var nCharacters = text.length;

	//console.log("split " + text + " in " + nRows + " rows. It has " + nWords + " words");

	if (nWords < nRows) {
		return text;
	}
	else if (nWords == nRows) {
		var newText = "";
		for(var i=0; i < nWords - 1; i++) {
			newText += words[i] + "<br>";
		}
		return newText += words[nWords - 1];
	}
	else {
		var mark = nCharacters / nRows; //Assume X / 2

		var newText = "";
		for(var i=nWords - 1; i > 0; i--) {
			newText = "<br>" + words[i]
		}
		return words[0].concat(newText);
	}
}

function breakTextOnMenuTabs() {
	var $menuBtns = $("#progress_bar button");
	$.each($menuBtns, function() {
	  splitTextElegantly($(this).text(), 2);
	});
}

function navigateToMainContentEventBinding() {
	$("#skip-navigation a").on("click", function() {
		var $input = $("#main-content").find(":input[id]:first");
		if (!$input.attr("id"))
			console.log("caught undefined id");

		setTimeout(function() {
			$input.focus()
		}, 100);
	});
}

//Appends attributes to number inputs, based on their classes
function appendAttributesToNumberInputs() {
	$(".input-decimal-2").attr("step", "0.01");
	$(".input-percentage").attr("min", "0");
	$(".input-percentage").attr("max", "100");
	console.log("DEBUG: appended attributes");
}

function appendAttributesToAutoGeneratedElements() {
	//Fix duplicate id:s

	//Recursive function that updates the id of an element and all its children
	var updateDuplicateIds = function(elements) { 
		$.each(elements, function(i) {
			$(this).attr("id", $(this).parent().attr("id") + $(this).attr("id") + i)
	  		if ($(this).children().length > 0) {
	  			updateDuplicateIds($(this).children());
	  		}
		});
	}

	//Start the recursion by calling the function with the parent element as argument
	var $progress_bar = $("#progress_bar");
	updateDuplicateIds($progress_bar.children());

	//Submit buttons: TODO
	//$("#knapp_neste").attr("type","submit");
	//$("#knapp_send_inn").attr("type","submit");

	//Append asterixes
	appendAsterixToMandatoryFields();

	//Append attributes to number-inputs
	appendAttributesToNumberInputs();
}

function appendAsterixToMandatoryFields() {
	$(".mandatory > fieldset > legend").append('<span aria-hidden="true"> *</span>');
}

function getSplitIndexForPhoneNumber(val) {
	return val.indexOf(") ") < 0 ?
			(val.indexOf(")") < 0 ?
				0 : val.indexOf(")")) + 1
			: val.indexOf(") ") + 2;
}

function autoFillPostalCode() {
	//Bind on keyup event, so that city/place is autofilled based on postal code
	$(".input-postalcode").on("keyup change", function() {
		var $inputPanel = $(this).closest(".input-panel");
		var $selectLand = $inputPanel.find(".select-land").first();
		if($selectLand) {
			var countryCode = $selectLand.val().toLowerCase();
			var postalCode = $(this).val();

			$.getJSON("https://fraktguide.bring.no/fraktguide/api/postalCode.json?country=" + countryCode + "&pnr=" + postalCode, function(json){
				if(json.valid && json.result) {
					//Autofill with result from API
					$inputPanel.find(".input-place").first().val(json.result);
				}
				console.log(JSON.stringify(json));
	    	});	
		}
 	});
}

//Uses the api provided by restcountries.eu
function autoFillCountryCallingCode() {
	var setCountryCode = function($sel) {
		if(!$sel.length) return;
		var code = $sel.val().toLowerCase();
		
		$.getJSON("https://restcountries.eu/rest/v2/alpha/" + code, function(result){
			
			//Prepend country code to all phone inputs in  the current input-panel
			var $formGroup = $sel.closest(".form-group");
			var $phoneInputs = $formGroup.find('input[type="tel"]');

			$.each($phoneInputs, function() {
				var val = $(this).val()
				var splitIndex = getSplitIndexForPhoneNumber(val);
				if (splitIndex == 0) { //When input is empty
					$(this).val("(+" + result.callingCodes[0] + ") ");
				}
				else {
					$(this).val("(+" + result.callingCodes[0] + ") " + val.substring(splitIndex, val.length));
				}
			});
    	});
	};

	//Bind on change event, so that country code is updated
	$(".select-land").on("change", function() {
		setCountryCode($(this));
 	});

	//Update the country code for the country currently selected
 	setCountryCode($(".select-land"));
}

function checkAndAutoFillFromOrgNr($orgNrInput) {
	var $errorMessage = $orgNrInput.parent().find(".digiforms_validation_message");
	var $validationField = $orgNrInput.closest(".input-panel").find(".orgnumber-valid:first");

	var orgNr = removeWhiteSpaces($orgNrInput.val());
	if (orgNr.length == 9) {
		var $formGroup = $orgNrInput.closest(".form-group");

		//Company name
		var $companyNameInput = $formGroup.find(".input-company-name");
		var companyName = "";

		//Postadresse
		var $countryInput = $formGroup.find(".select-land");
		var country = $countryInput.val();
		var $streetInput = $formGroup.find(".input-street");
		var street = "";
		var $postalCodeInput = $formGroup.find(".input-postalcode");
		var postalCode = "";
		var $placeInput = $formGroup.find(".input-place");
		var place = "";

		$.getJSON("https://data.brreg.no/enhetsregisteret/enhet/" + orgNr + ".json", function(result) {
			console.log("enhet");
			if (result.status != 400) {
				companyName = result.navn;
				country = result.forretningsadresse.landkode;
				street = result.forretningsadresse.adresse;
				postalCode = result.forretningsadresse.postnummer;
				place = result.forretningsadresse.poststed;

				$companyNameInput.val(companyName);
				$countryInput.val(country);
				$streetInput.val(street);
				$postalCodeInput.val(postalCode);
				$placeInput.val(place);
				$validationField.val("true");
				//TODO
				clearErrormessage($placeInput);
				clearErrormessage($orgNrInput);
			}
			else {
				console.log("Noe som trengs her?");
			}
		}).fail(function(jqxhr) {
		    if (jqxhr.status == 404) {
		       	//Prøv å slå mot underenhetsregisteret istedenfor: (kanskje ikke best practice?)
				$.getJSON("https://data.brreg.no/enhetsregisteret/underenhet/" + orgNr + ".json", function(result) {
					console.log("underenhet");
					if (result.status != 400) {
						companyName = result.navn;
						country = result.beliggenhetsadresse.landkode;
						street = result.beliggenhetsadresse.adresse;
						postalCode = result.beliggenhetsadresse.postnummer;
						place = result.beliggenhetsadresse.poststed;
						$validationField.val("true");
						//TODO
						clearErrormessage($placeInput);
						clearErrormessage($orgNrInput);
					}
					else {
						//TODO: gi feilmelding det må være et gyldig (norsk) orgnummer
						console.log("Ugyldig orgnummer (underenhet)");
						$errorMessage.text("Ugyldig organisasjonsnummer");
						$validationField.val("false");
					}
				}).always( function() {
					$companyNameInput.val(companyName);
					$countryInput.val(country);
					$streetInput.val(street);
					$postalCodeInput.val(postalCode);
					$placeInput.val(place);
				});
		    }
		    else {
		    	console.log("Ugyldig orgnummer (enhet)");
		    	$errorMessage.text("Ugyldig organisasjonsnummer");
		    	$validationField.val("false");
		    }
		});
	}
	else {
		//TODO: gi feilmelding om at 9 siffer må fylles ut
		if (orgNr.length > 0) $errorMessage.text("Må være 9 siffer");
		else $errorMessage.text("Må fylles ut");
		console.log("orgnummer må være 9 siffer");
		$validationField.val("false");
	}
}

function autoFillFromOrgNr() {
	$(".input-org-number").on("change", function() {
		checkAndAutoFillFromOrgNr($(this));
	});
}

function bindEventsThatCallsExternalAPIs() {
	autoFillPostalCode();
	autoFillCountryCallingCode();
	autoFillFromOrgNr();
}

function removeWhiteSpaces(str) {
	var subStrings = str.split(" ");
	var newStr = "";
	for(var i=0; i < subStrings.length; i++) {
		newStr += subStrings[i].trim();
	}
	return newStr;
}

function validationMOD11(val, weightNumber, ignoreLength) {
	var number = removeWhiteSpaces(val);
	console.log("validate: " + number);

	var sum = 0;
	for(var i=0; i < number.length - 1; i++) {
		console.log(number.charAt(i) + " * " + weightNumber.charAt(i) + " = " + (number.charAt(i) * weightNumber.charAt(i)));
		sum += number.charAt(i) * weightNumber.charAt(i);
	}

	var reminderMOD11 = sum % 11;

	//Calculate control number (norwegian account numbers can't have a reminder of 1)
	var calculatedControllNumber = reminderMOD11 == 0 ? 0 : 11 - reminderMOD11;
	
	//Check if the calculated control number is equal to the given one ()
	if (calculatedControllNumber != number[number.length - 1] && (ignoreLength || number.length == 11)) {
		console.log("not valid. Calculated: " + calculatedControllNumber + " actual: " + number[number.length - 1]);
		return false;
	}
	else if (ignoreLength || number.length == 11) {
		console.log("valid!");
		return true;
	}
	else {
		console.log("invalid, incorrect length!");
		return false;
	}
}

function validation() {

	var findMyHiddenBrother = function($input) {
		var $validationField = $input.closest(".label_control").parent().parent().find("input[type=hidden]:first");
		return $validationField;
	}

	//Validation for norwegian account numbers
	var validateAccountNo = function($element) {
		var valid = validationMOD11($element.val(), "5432765432", false);
		var $validationField = findMyHiddenBrother($element);
		$validationField.val(valid);
		if (!valid && $element.val().length == parseInt($element.attr("maxlength"))) {
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Ugyldig kontonummer");
		}
	}

	var $accountInputs = $("input.numeric-text.account-mask");
	$accountInputs.on("change", function() {
		validateAccountNo($(this));
	});

	if ($accountInputs.length) {
		$.each($accountInputs, function() {
			validateAccountNo($(this));
		});
	}

	//Validation for norwegian input social security numbers
	var validateSocialSecurityNumberNo = function($element) {
		var valid1 = validationMOD11($element.val().substring(0, 10), "376189452", true); //1st Kontrollsiffer
		var valid2 = validationMOD11($element.val(), "5432765432", false); //Second control number
		var $validationField = findMyHiddenBrother($element);
		$validationField.val(valid1 && valid2);
		if (!(valid1 && valid2) && $element.val().length == parseInt($element.attr("maxlength"))) {
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Ugyldig fødselsnummer");
		}

	}

	var $socialSecurityNumberNoInputs = $("input.numeric-text.input-social-security-number-no");
	$socialSecurityNumberNoInputs.on("change", function() {
		validateSocialSecurityNumberNo($(this));
	});

	if ($socialSecurityNumberNoInputs.length) {
		validateSocialSecurityNumberNo($socialSecurityNumberNoInputs);
	}

	//Checks and sets validationmessage depending on feedback from 
	//External API (brreg)
	var $orgNumberInputs = $(".input-org-number");
	if($orgNumberInputs.length) checkAndAutoFillFromOrgNr($orgNumberInputs);

	//Validate lei-number
	$(".n-validate").on("change", function() {
		var $validationInput = findMyHiddenBrother($(this));
		var valTrimmed = removeWhiteSpaces($(this).val());
		if(valTrimmed.length == 0 || valTrimmed.length == parseInt($(this).attr("maxlength"))) {
			$validationInput.val("true");
		}
		else {
			$validationInput.val("false");
		}
		console.log("Validation val is " + valTrimmed.val());
	});
}

function setOffset($element) {
	var widthOffset = ($element.width() * 1.5) + "px";
	$element.attr("style", "padding-left: calc(50% - " + widthOffset + ")");
}

function calculateAndSetNavButtonWidths() {
	var $buttons = $("#progress_bar .container_button, .container_button_current");

	var totalWidth = $("#progress_bar").width();
	numberOfButtons = $buttons.length;

	var widthPrButton = totalWidth / numberOfButtons;

	var relativeWidthPrButton = (widthPrButton / totalWidth) * 100 - 1;

	$buttons.css("width", relativeWidthPrButton + "%");
}

function getFirstError($root) {
	return $root.find(".digiforms_validation_message:first");
}

function scrollToFirstError() {
	var $firstError = getFirstError($("body")).closest(".label_control").parent();

	//Check if the error is linked to an input
	if (!$firstError.length) {
		//If not, it's linked to a fieldset. And we look for that instead.
		$firstError = $(".digiforms_validation_message:first").closest("fieldset");
	}
	scrollTo($firstError, 1000);
}


function disableAddButtonsWhenMaxIsReached() {
	var $loadContainer =  $(".load-container.max-6");
	if($loadContainer.find(".accordion-container").length > 5) {
		$loadContainer.siblings(".add-content").prop("disabled", true);
		$loadContainer.append("<p class='text-center'><strong>Du kan ikke legge til flere rettighetshavere.</strong></p>")
	}
}

function initFileDownloadLinks() {
	var sessionTag = $("#frm").attr("action").split("?")[1];
	$.each($(".file-download"), function() {
		$(this).attr("href", $(this).attr("href") + sessionTag);
	});
}

function setAriaAttributesForFileDownloadButtons() {
	$.each($(".file-download"), function() {
		$(this).attr("role", "link");
	});
}

function initFileDownloads() {
	initFileDownloadLinks();
	setAriaAttributesForFileDownloadButtons();	
}

function setAriaAttributesForDeleteButtons() {
	$.each($(".btn-delete"), function() {
		var $deletableElement = $(this).closest(".deletable");
		var $item = $deletableElement.find(".item");
		var $description = $deletableElement.find(".aria-description");
		if ($item.length) {
			$(this).attr("aria-controls", $item.attr("id"));
			$(this).attr("aria-describedby", $description.attr("id"));
			$(this).attr("aria-label", "Slett");
		}
	});
}