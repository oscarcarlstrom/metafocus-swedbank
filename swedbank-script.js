//Used to detect when the CTRL key is pressed
var ctrlDown;

//Used to detect when the SHIFT key is pressed
var shiftDown;

//Used to detect when the TAB key is pressed
var tabDown;

//Used to detect a delete button has been pressed
var scrollToElementAddedByAJAX = false;

$(document).ready(function() {
	//Remove browser validation
	//This is not currently needed to prevent the validation, but it might be
	//if digiforms is updated to use submit buttons
	//It is however necessary in order to prevent red borders around inputs
	//(in some browsers, e.g. firefox)
	preventBrowserFormActions();

	//Events used to check if control or tab is pressed
	initGlobalKeyEventListener();

	//Form elements
	formControlEventbinding();

	//Skip nav
	navigateToMainContentEventBinding();

	//Adjustments to the auto generated parts of the DOM
	adjustAutoGeneratedElements();

	//Event bindings that uses external APIs
	bindEventsThatCallsExternalAPIs();

	//Event bindings used for special validation
	validation();

	//Scrolls the first input with an error into view
	scrollToFirstError();

	//Adjust hrefs for file-download links
	initFileUpAndDownloads();

	//Disables add buttons when maxium number of
	//elements has been added
	disableAddButtonsWhenMaxIsReached();

	//Sets ARIA attributes for delete buttons
	setAriaAttributesForDeleteButtons();

	//Bind events / adjust eventhandlers to elements
	//that triggers ajax update
	initAJAXUpdateElements();
});

//Adds the attribute for no validation
function preventBrowserFormActions() {
	$("#frm").attr("novalidate", "novalidate");
}

//Initalizes event listeners
//for the CTRL and TAB keys
function initGlobalKeyEventListener() {

	//Checks if the CTRL key is pressed
	ctrlDown = false;
	$(document).on("keydown", function(event) {
		var key = event.which || event.keyCode;
		if (key == 17) {
			ctrlDown = true;
		}
	});
	$(document).on("keyup", function(event) {
		var key = event.which || event.keyCode;
		if (key == 17) {
			ctrlDown = false;
		}
	});

	//Checks if the SHIFT key is pressed
	shiftDown = false;
	$(document).on("keydown", function(event) {
		var key = event.which || event.keyCode;
		if (key == 16) {
			shiftDown = true;
		}
	});
	$(document).on("keyup", function(event) {
		var key = event.which || event.keyCode;
		if (key == 16) {
			shiftDown = false;
		}
	});

	//Checks if the TAB key is pressed
	tabDown = false;
	$(document).on("keydown", function(event) {
		var key = event.which || event.keyCode;
		if (key == 9) {
			tabDown = true;
		}
	});
	$(document).on("keyup", function(event) {
		var key = event.which || event.keyCode;
		if (key == 9) {
			tabDown = false;
		}
	});
}

//Adds event listneres for checkboxes And
//radio buttons
function initCheckBoxesAndRadios() {

	//Event listener added to extend the clickable
	//area for checkboxes and radio buttons
	$(".label_text").on("click", function(e) {
	    if (e.target.localName != "label") {
	    	var $checkbox = $(this).parent().find("input:checkbox");
	    	$checkbox.trigger("click");

	    	var $radio = $(this).parent().find("input:radio");
	    	$radio.trigger("click");
	    }
	});

	//Toggles class for checked/unchecked
	//customized checkboxes (styled with pseudo elements)
	var toggleCheck = function($input) {
		if ($input.is(":checked")) {
	        $input.parent().siblings(".label_text").addClass("checked");
	    }
	    else {
	    	$input.parent().siblings(".label_text").removeClass("checked");
	    }
	};

	//Toggle class "checked" for customized checkboxes
	$(".control input:checkbox").on("change", function() {
		toggleCheck($(this));
	});

	//To ensure that all customized checkboxes
	//are marked as checked when re-visiting a page
	var $checkboxes = $(".control input:checkbox:checked");
	$.each($checkboxes, function() {
		toggleCheck($(this));
	});

	//Toggle class "checked" for customized radio buttons
	$(".control input:radio").on("change", function() {
		var $allRadiosInFieldset = $(this).closest("fieldset").find("input:radio");
		$.each($allRadiosInFieldset, function() {
			toggleCheck($(this));
		});
	});

	//To ensure that all customized radio buttons
	//are marked as checked when re-visiting a page
	var $radios = $("input:radio");
	$.each($radios, function() {
	  toggleCheck($(this));
	});

	//Focus - adds class (for accessibility)
	$(".control input").on("focus", function() {
		$(this).parent().parent().addClass("focused");
	});

	//Blur - removes class (for accessibility)
	$(".control input").on("blur", function() {
		$(this).parent().parent().removeClass("focused");
	});

	//Removes error message when a radio buttons
	//or checkbox is selected
	$(".control input").on("change", function() {
		if($(this).is(":checked")) {
			$(this).closest(".control-container").find(".digiforms_validation_message:not(.file-error):first").hide();
		}
	});
}

//Inits help text Buttons
function initHelptexts() {
	//First hide all the help texts
	var $helpTexts = $(".help-text").hide();

	//Add WAI-ARIA attributes for accessibility
	$helpTexts.attr("aria-hidden", "true");

	var $helpBtns = $(".btn-help");
	$helpBtns.attr("aria-label", "Hva menes med dette?");
	$helpBtns.attr("aria-expanded", "false");

	$.each($helpBtns, function() {
		var $helpElementsForInputs = $(this).closest(".help-elements-for-input").parent();

		var $correspondingDescription = "";

		if($helpElementsForInputs.length) {
			$correspondingDescription = $helpElementsForInputs.find("label:first");
			$correspondingDescription.attr("id", $correspondingDescription.attr("for") + "-" + $correspondingDescription.text().split("*")[0].trim())
		}
		else {
			$correspondingDescription = $(this).closest(".help-elements-for-fieldset").parent().find("legend:first");
			$correspondingDescription.removeClass("control-container-tight");
		}

		$(this).attr("aria-describedby", $correspondingDescription.attr("id"));

		$(this).attr("aria-controls", $(this).siblings(".help-text:first").attr("id"));
	});

	//Bind evnts that toggles show/hide for the help text
	$helpBtns.on("click", function() {
		$(this).toggleClass("active");

		var $helpText = $(this).next(".help-text");

		$helpText.toggle();

		if ($helpText.is(":visible")) {
			$helpBtns.attr("aria-label", "Lukk hjelpetekst");
			$helpText.attr("aria-hidden", "false");
			$helpBtns.attr("aria-expanded", "true");
		}
		else {
			$helpBtns.attr("aria-label", "Hva menes med dette?");
			$helpText.attr("aria-hidden", "true");
			$helpBtns.attr("aria-expanded", "false");
		}
	});
}

//Takes a string and inserts the given
//mask when the function maskHere() returns true
//The parameter x is optional in the function maskHere()
//But is required in this function
function formatAfterInput(str, maxlength, mask, maskHere, x) {
	var valTrimmed = removeWhiteSpaces(str);
	valTrimmed = removeSubstr(valTrimmed, mask);
	var lastSliceIndex = 0;
	var newVal = "";
	for(var i = x; i < valTrimmed.length; i++) { //Make sure to prevent array out of bounds
		if (maskHere(i, x)) {
			newVal += valTrimmed.substring(lastSliceIndex, i) + mask;
			lastSliceIndex = i;
		}
	}
	newVal += valTrimmed.substring(lastSliceIndex, valTrimmed.length);
	return newVal.substring(0, maxlength);
}

//Pads the given string with a space, by x characters
function padBy(x, str, maxlength) {
	return formatAfterInput(str, maxlength, " ", function(i, x) { return i % x == 0; }, x);
}

function initInputs() {
	//Bring up the numeric keypad for iOS and Android
	$("input.numeric-text").attr("inputmode", "numeric"); //Android
	$("input.numeric-text").attr("pattern", "[0-9]*"); //iOS

	//Sets a mask for some classes:
	$("input.numeric-text.no-mask").mask('0#');

	$('input[type="tel"]').mask("+099999 000 00 000 000 00 000 00");

	$("input.account-mask").mask("0000 00 00000");

	$("input.vps-account-mask").mask("00000 0000000");

	$("input.org-number-mask").mask("000 000 000");

	$("input.date-mask").mask("00.00.0000");

	$("input.letteral-text").mask("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ",
		{translation: {"Z": {pattern: /[a-zA-Z ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏàáâãäåæçèéêëìíîïÐÑÒÓÔÕÖØÙÚÛÜÝÞßðñòóôõöøùúûüýþÿ-]/}}});

	//Checks if keyCode is numeric
	//Allows keycodes are defined by the array "exceptionKeyCodes"
	//allowShift makes an exception to allow the SHIFT key to be pressed (e.i for phone numbers)
	var isNumericKey = function(keyCode, exceptionKeyCodes, allowShift) {
		if (((allowShift || !shiftDown) && keyCode >= 48 && keyCode <= 57) ||
			(keyCode >= 96 && keyCode <= 105) ||
			(exceptionKeyCodes != undefined && $.inArray(keyCode, exceptionKeyCodes) > -1)) {
			return true;
		}
		return false;
	}

	var isDeleteKey = function(event) {
		var key = event.which || event.keyCode;
		//Check if key is delete
		if(key == 46) {
			return true;
		}
		return false;
	}

	var isBackspaceKey = function(event) {
		var key = event.which || event.keyCode;
		//Check if key is backspace
		if(key == 8) {
			return true;
		}
		return false;
	}

	//Checks if key was delete, backspace, arrows, shift, ctrl, tab, home or end key
	var isEditKeyEvent = function(event) {
		if (ctrlDown) return true;
		var key = event.which || event.keyCode;
		if(!isBackspaceKey(event) && key != 9 && !isDeleteKey(event) && key != 13 && key != 16 && key != 17 && key != 19 && (key < 35 || key > 40)) return false;
		return true;
	}

	//Prevents user from entering non-numeric in
	//numeric inputs (possible in several browsers, e.g safari, firefox)
	$("input.numeric-decimal").on("keydown", function(event) {
		var key = event.which || event.keyCode;
		//Prevent non numeric characters
		//Don't remove characters: "," and ".", don't allow SHIFT key
		if (!isEditKeyEvent(event) && !isNumericKey(key, [188, 190], false)) {
			event.preventDefault();
		}
	});

	//Validates percentage according to min/max attributes.
	//This one is added here and not in the validation() function
	//because it is the only validation needed for benifital owners.
	//Those are added added dynamically using AJAX which means
	//that this parent function (initInputs) must be called again
	//when a benifital owner is added
  $(".input-percentage").on("change paste", function() {
  	var val = parseFloat($(this).val());
  	var max = $(this).attr("max");
  	var min = $(this).attr("min");

  	if(val <= max && val >= min) {
  		$(this).parent().parent().siblings("input[type=hidden]").val("true");
  	}
  	else {
  		$(this).parent().parent().siblings("input[type=hidden]").val("false");
  	}
  	$(this).val(val.toString());
  });

	//Used to set the marker at the end of the prefilled input
	//e.i country code for phone numbers
	$(".prevent-select-on-tab").on("keyup", function(event)  {
 		var key = event.which || event.keyCode;
 		if (key == 9) {
 			$(this).prop("selectionStart", $(this).prop("selectionEnd"));
 		}
 	});
	$(".prevent-select-on-tab").on("focus", function(event)  {
		if (tabDown || $(this).prop("selectionStart") != $(this).prop("selectionEnd")) {
			$(this).prop("selectionStart", $(this).prop("selectionEnd"));
		}
 	});
}

//Inits all form controls
function formControlEventbinding() {
	initCheckBoxesAndRadios();
	initHelptexts();
	initInputs();
	initAccordions();
}

//Scrolles selected element into view
function scrollTo($element, delay) {
	if ($element.length > 0) {
		$('html, body').animate({
        	scrollTop: $element.offset().top
    	}, delay);
	}
}

//Toggels WAI-ARIA properties for a given accordion
//(identified by its button)
function toggleARIAPropertiesForAccordion($accBtn) {
	var expanded = $accBtn.attr("aria-expanded");

	var ariaExpandedAttr = expanded == "false" ? "true" : "false";
	$accBtn.attr("aria-expanded", ariaExpandedAttr);

	var $correspondingPanel = $accBtn.siblings(".panel:first");
	var ariaHiddenAttr = expanded;
	$correspondingPanel.attr("aria-hidden", ariaHiddenAttr);
}

//Sets WAI-ARIA properties for a given accordion
//(identified by its button)
function addARIAPropertiesToAccordion($accBtn) {
	var $correspondingPanel = $accBtn.siblings(".panel:first");

	$accBtn.attr("aria-controls", $correspondingPanel.attr("id"));
	$accBtn.attr("aria-expanded", "false");

	$correspondingPanel.attr("aria-hidden", "true");
}

//Opens all accordions that have errors
function openAccordionsWithErrors($panels) {
	$.each($panels, function() {
		if (getFirstError($(this)).length) {
			var $correspondingButton = $(this).siblings(".accordion:first");
			if (!$correspondingButton.hasClass(".active")) {
				$correspondingButton.click();
			}
		}
	});
}

//Scrolls to the last unfinnished accordion if there are no accordions
//with errors (there can only be errors if the forms has been validated)
function scrollToLastUnfinnishedAccordion($panels) {
	var $lastAccordionContainer = $(".focus-last-child .accordion-container").last();
	var $lastAccordionBtn = $lastAccordionContainer.find(".accordion").first();
	if (!$lastAccordionBtn.hasClass("active")) {
		var blankFormInputs = false;
		$.each($lastAccordionContainer.find("input"), function() {
			if (!$(this).val()) {
				blankFormInputs = true;
				return false;
			}
		});
		if (blankFormInputs) {
			$lastAccordionBtn.click();
			scrollTo($lastAccordionContainer, 1000);
		}
	}
}

//Toggle a given accordion (identified by its button)
function toggleAccordion($accBtn) {
	$accBtn.toggleClass("active");
	var $correspondingPanel = $accBtn.siblings(".panel").first();
	$correspondingPanel.toggleClass("hidden");
	toggleARIAPropertiesForAccordion($accBtn);
}

//Initalizes accordions that are added dynamically by AJAX
function initAccordionsAddedByAJAX() {

	//Add WAI-ARIA attributes
	var $accBtns = $(".load-container button.accordion");
	$.each($accBtns, function() {
		addARIAPropertiesToAccordion($(this));
	});

	//Appends attributes such as max/min to inputs
	//inside the panel of the accordion
	appendAttributesToNumberInputs();

	//Sets the text of the button to the same as the name of
	//the benefitial owner (accordion has class "set-name-accordion")
	var setAccordionBtnTitle = function($accordionContainer) {
		var prefix = '<span class="chev"></span><span class="desc">';
		var suffix = "</span>";
		var title = $accordionContainer.find(".accordion-description").first().val();
		var $button = $accordionContainer.find("button.accordion");
		if (title != "") {
			$button.html(prefix + title + suffix);
		}
		else {
			var idSplit = $button.attr("id").split("_");
			$button.html(prefix + "Reell rettighetshaver " + (idSplit.length > 0 ? idSplit[idSplit.length - 1] : "") + suffix);
		}
	};

	$.each($(".load-container .set-name-accordion"), function() {
		setAccordionBtnTitle($(this));
	});

	$(".load-container .set-name-accordion .accordion-description").on("change", function() {
		setAccordionBtnTitle($(this).closest(".set-name-accordion"));
	});

	//Init for autofill country phone code 	and city
	bindEventsThatCallsExternalAPIs();

	//Init number patterns and percentage validation
	initInputs();

	//Init delete buttons (to delete accordions)
	initDeleteButtons();

	//Prevent user from adding more items than allowed
	disableAddButtonsWhenMaxIsReached();

	//Scrolls to the last unfinnished accordion
	//(that has class "focus-last-child")
	var $panels = $(".load-container .accordion-container .panel");
	if (scrollToElementAddedByAJAX) {
		scrollToLastUnfinnishedAccordion($panels);
	}
	else if (getFirstError($("#main-content_content")).length) {
		openAccordionsWithErrors($panels);
	}
	scrollToElementAddedByAJAX = true;
}

//Initalizes regular accordions
function initAccordions() {
	//Panels
	var $panels = $(".accordion-container:not(.added-by-AJAX) .panel");
	$.each($panels, function() {
		if (!$(this).hasClass("hidden")) {
			$(this).addClass("hidden");
		}
	});

	//Buttons
	var $accBtns = $(".accordion-container:not(.added-by-AJAX) button.accordion");
	$.each($accBtns, function() {
		addARIAPropertiesToAccordion($(this));
	});
	$accBtns.on("click", function() {
		toggleAccordion($(this));
	});

	//Set aria attributes for edit buttons (that are inside summary accordions)
	$.each($(".accordion-container .summary-container"), function() {
		var $changeBtn = $(this).siblings(".btn-primary");
		$changeBtn.attr("aria-describedby", $(this).find("table").attr("aria-describedby"));
	});
}

//Init skip-links - navigates to main content
function navigateToMainContentEventBinding() {
	$("#skip-navigation a").on("click", function() {
		var $input = $("#main-content").find(":input[id]:first");

		setTimeout(function() {
			$input.focus()
		}, 100);
	});
}

//Appends attributes to number inputs, based on their classes
function appendAttributesToNumberInputs() {
	$(".input-decimal-2").attr("step", "0.01");
	$(".input-percentage").attr("min", "0");
	$(".input-percentage").attr("max", "100");
}

//Adjusts the auto generated error list
function adjustErrorMessageList() {
	$(".error-summary").hide();
	$.each($(".error-summary > div"), function(index) {

		//Adjust the HTML markup
		var $firstChild = $(this).children(":first");
		var autoGeneratedHeadingSplit = $firstChild.text().split("(");

		var pageNumber = autoGeneratedHeadingSplit[0].split("page ").pop().trim();
		var heading = pageNumber + ". " + autoGeneratedHeadingSplit[1].split("-")[0];
		$firstChild.remove();
		$(this).prepend('<h4 id="error-heading-' + pageNumber + '">' + heading + "</h4>");
		$(this).addClass("panel panel-danger list-container");

		var $container = $(this);


		var documentName = "Swedbank_KYC";
		if($("title").text().split("-")[1].trim() == "Bedrift") {
			documentName += "_Bedrift";
		}

		//Variables used manipulate error text and style of
		//benifital owners (to avoid identical text on links).
		//And adjust the layout so it's easier to read
		var prefixBenifitialOwners = "";
		var prevBenifitialOwner = "1";
		var errorsForBenifitialOwnersHasBeenListed = false;

		//Adjust the error messages and the links
		var sessionTagIndex = window.location.href.indexOf("xsessiontag");
		var getUrl = window.location.href.substring(0, sessionTagIndex) + "documentName=" + documentName + "&pageNumber=" + pageNumber;

		$.get(getUrl, function(data) {
			var trimmedData = data.substring(data.indexOf("<form"), data.indexOf("</form>") + 8);
			var $DOM = $($.parseHTML(trimmedData));

			//Update the links in the list of errors
			$.each($container.find("ul li a"), function(index) {
				var fieldID = $(this).attr("href").split("#").pop().replace(".", "\\.");
				var $field = $DOM.find("#"+fieldID);
				if($field != undefined && $field.hasClass("control-validation")) {

					//Update error text
					var $correspondingLegend = $field.parent().siblings("legend");
					$(this).text($correspondingLegend.text() + " (" + $(this).text() + ")");

					//Make an exception for the question about PEP with
					//pep-text-container_legend (company only)
					if ($correspondingLegend.attr("id") == "pep-text-container_legend") {

						var $PEPLegendLink  = $(this);

						var getXMLUrl = window.location.href.replace("htmlViewer", "xmlData");

						//Gets the xml data from the server
						//The dataType is set to "text" in order for
						//it to work in Internet Explorer (at least IE11)
						//The data is later parsed as xml, which works fine.
						//Note that "cache" is set to "false"
						//Otherwise IE will cache the data returned from this request
						$.ajax({
							type: "GET",
							url: getXMLUrl,
							dataType: "text", //IE
							cache : false, //IE
							xhr: function() {
								return window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
							},
							success: function (data) {
								var xmlData = $.parseXML(data);
								var aktorerIBedriftenChilds = xmlData.getElementsByTagName("aktorer-i-bedriften")[0].childNodes;

								for (var i=0; i < aktorerIBedriftenChilds.length; i++) {
									//Update the text of the error message (the company does not have any benifital owners)
									if (aktorerIBedriftenChilds[i].nodeName == "reelle-rettighetshavere" && aktorerIBedriftenChilds[i].getAttribute("har") == "nei") {
										$PEPLegendLink.text($PEPLegendLink.text().replace("reelle rettighetshavere, ", ""));
									}
								}
							}
						});
					}

					//Update the href so that the input field (label) can be scrolled into view
					$(this).attr("href", $(this).attr("href").split("#")[0] + "#" + $correspondingLegend.attr("id"));

					//Add som margin-top if needed
					if (errorsForBenifitialOwnersHasBeenListed) {
						$(this).parent().css("margin-top", "3em");
						errorsForBenifitialOwnersHasBeenListed = false;
					}
				}
				//Adjust link to file upload error
				else if ($(this).text().toLowerCase().indexOf("laste opp fullmakt") > -1) {
					$(this).attr("href", $(this).attr("href").split("#")[0] + "#fullmakt-container");
				}
				//Adjust text and link for benifital owners
				else if (heading.indexOf("Aktører i bedriften") > -1) {
					//Update error text
					var currentBenifitialOwner = $(this).attr("href").split("_").pop().trim();
					prefixBenifitialOwners = "Reell rettighetshaver " + currentBenifitialOwner + " - ";
					$(this).prepend(prefixBenifitialOwners);

					//Update the href so that it can be scrolled into view nicely
					//By making sure the label of the input is shown
					$(this).attr("href", $(this).attr("href").split("#")[0] + "#" + "container-" + $(this).attr("href").split("#").pop());

					//Add som margin-top if needed
					if (currentBenifitialOwner != prevBenifitialOwner) {
						$(this).parent().css("margin-top", "3em");
					}
					prevBenifitialOwner = currentBenifitialOwner;

					errorsForBenifitialOwnersHasBeenListed = true;
				}
				//Adjust link to input fields (so that the label is also scrolled into view, not just the input itself)
				else if ($field.length) {
					//Update the href so that it can be scrolled into view nicely
					//By making sure the label of the input is shown
					var $correspondingLabel = $field.parent().siblings(".label_text");
					$(this).attr("href", $(this).attr("href").split("#")[0] + "#" + $correspondingLabel.attr("id"));
				}
		  });
		});
	});

	//Adjust som more auto generated HTML mark-up
	$(".error-summary").prepend("<h3>Vi må be deg om å rette opp noen feil</h3>");
	$(".error-summary").show();
}

//Adjusts error messages that has class "trim-errormsg"
//This is to present shorter error messages on submit than in
//the error list presented at the end.
//For example "Name is required" becomes "Required" when
//displayed beneath the input label "Name"
//But is shown as "Name is required" in the error list in the summary
function adjustErrorMessages() {
	$.each($(".trim-errormsg .digiforms_validation_message"), function() {
		var newText = $(this).text().split("må").pop();
		$(this).text("Må" + newText);
	});
}

//Appends WAI-ARIA landmarks for autogenerated elements
function appendAriaAttributesForPageSections() {
	//Landmarks for header
	$(".header").attr("role", "banner");

	//Landmarks for main
	$("#main-content").attr("role", "main");
	var $mainContentLabelledby = $("#main-content_legend");
	if ($mainContentLabelledby.length == 0) {
		$mainContentLabelledby = $("#main-content_heading");
	}
	$("#main-content").attr("aria-labelledby", $mainContentLabelledby.attr("id"));

	//Bottom nav
	$(".next-prev-nav").attr("role", "navigation");
	$(".next-prev-nav").attr("aria-label", "Forrige / Neste");
}

//Toggles text on change
function changeTextOnChange() {

	//Adjusts the (auto generated) HTML for the specific PEP question
	var $togglePEPText = $("#pep-text-container").find("fieldset legend:first");
	$togglePEPText.text("Er noen av foretakets ");
	$togglePEPText.append('<span class="text-toggle">reelle rettighetshavere, </span>styremedlemmer, daglig leder eller kontaktperson(er) en Politisk Eksponert Person (PEP)?');
	$togglePEPText.append('<span class="asterix" aria-hidden="true"> *</span>');

	//Toggles text identified by the id suffix of the element itself
	var toggle = function($toggleElement) {
		var idSplit = $toggleElement.attr("id").split("toggles-");
		var toggles = idSplit.pop().trim();
		var action = idSplit[0].replace("-", "").trim();

		//Toggle text (show/hide)
		if ($toggleElement.is(":checked")) {
			if (action == "show") {
				$("#" + toggles + " .text-toggle").show();
			}
			else if (action == "hide") {
				$("#" + toggles + " .text-toggle").hide();
			}
		}
	}

	//Get all elements that should toggle text on change
	var $togglesText = $(".toggles-text-on-change");

	//Init
	$.each($togglesText, function() {
		toggle($(this));
	});

	//Add event handler
	$togglesText.on("change", function() {
		toggle($(this));
	});
}

//Adjusts auto generated HTML mark-up
function adjustAutoGeneratedElements() {
	//Fix duplicate id:s
	//Recursive function that updates the id of an element and all its children
	var updateDuplicateIds = function(elements) {
		$.each(elements, function(i) {
			$(this).attr("id", $(this).parent().attr("id") + $(this).attr("id") + i)
	  		if ($(this).children().length > 0) {
	  			updateDuplicateIds($(this).children());
	  		}
		});
	}

	//Append asterixes
	appendAsterixToMandatoryFields();

	//Append attributes to number-inputs
	appendAttributesToNumberInputs();

	//Make adjustments to the error list on the last page
	adjustErrorMessageList();

	//Make adjustments to the error list on the last page
	adjustErrorMessages();

	//Add WAI-aria landmarks to page sections
	appendAriaAttributesForPageSections();

	//Toggles a text when
	changeTextOnChange();
}

//Appends asterixes to mandatory fieldsets
//- labels for checkboxes and radio buttons
function appendAsterixToMandatoryFields() {
	$(".mandatory > fieldset > legend").append('<span class="asterix" aria-hidden="true"> *</span>');
}

//Used to format phonenumber
//Determines the index of the auto filled country code
function getSplitIndexForPhoneNumber(val) {
	return val.indexOf(") ") < 0 ?
			(val.indexOf(")") < 0 ?
				0 : val.indexOf(")")) + 1
			: val.indexOf(") ") + 2;
}

//Start loading animation in input
function startLoadingAnimation($input) {
	$input.attr("disabled", "disabled");
	$input.parent().addClass("loading");
}

//End loading animation in input
function endLoadingAnimation($input) {
	$input.removeAttr("disabled", "disabled");
	$input.parent().removeClass("loading");
}

//Auto fills postal code using the API from bring.no
function autoFillPostalCode() {
	//Bind on keyup event, so that city/place is autofilled based on postal code
	$(".input-postalcode").on("keyup change", function() {
		var $inputPanel = $(this).closest(".input-panel");
		var $selectLand = $inputPanel.find(".select-land").first();
		if($selectLand) {
			var countryCode = $selectLand.val().toLowerCase();
			var postalCode = $(this).val();

			var $inputPlace = $inputPanel.find(".input-place").first();

			$.getJSON("https://fraktguide.bring.no/fraktguide/api/postalCode.json?country=" + countryCode + "&pnr=" + postalCode, function(json){
				if(json.valid && json.result) {
					//Autofill with result from API
					$inputPlace.val(json.result);
				}
	    	});
		}
 	});

	//Toggles pattern (used to bring up numeric keypad on iOS mobile)
	//for the postal code input
	var togglePattern = function($sel) {
		var $formGroup = $sel.closest(".form-group");
		var $postalCodeInputs = $formGroup.find(".input-postalcode");

		var countryCode = $sel.val().toUpperCase();
		//Here is a manual selction of countries (the ones that we assume are most common)
		//that we add the patterns for.
		//In reality most countries have numeric postal codes
		//But since these tings sometimes change over time
		//(it is proposed that all contries start using alpha numerical postal codes)
		//It has been done this way for now (just to be safe)
		if (countryCode == "NO" || countryCode == "SJ" || countryCode == "SE" || countryCode == "DK" || countryCode == "FI" || countryCode == "DE" || countryCode == "FR" || countryCode == "LI" || countryCode == "EE" || countryCode == "LV") {
			$postalCodeInputs.attr("pattern", "[0-9]*"); //iOS
			$postalCodeInputs.attr("inputmode", "numeric"); //Android
		}
		else {
			$postalCodeInputs.removeAttr("pattern"); //iOS
			$postalCodeInputs.removeAttr("inputmode"); //Android
		}
	}

	//Bind on change event, so that pattern on iOS mobile can be updated according to
	//postal code format.
	$(".select-land").on("change", function() {
		togglePattern($(this));
 	});

	//Toggle according to current country
	$.each($(".select-land"), function() {
		togglePattern($(this));
	});
}

//Auto fills the country calling code using the API provided by restcountries.eu
function autoFillCountryCallingCode() {
	var setCountryCode = function($selects) {
		if(!$selects.length) return;

		$.each($selects, function() {
			var $sel = $(this);
			var code = $sel.val().toLowerCase();

			$.getJSON("https://restcountries.eu/rest/v2/alpha/" + code, function(result){
				if (result.status != 400 && result.status != 404) {
					//Prepend country code to all phone inputs in  the current input-panel
					var $formGroup = $sel.closest(".form-group");
					var $phoneInputs = $formGroup.find('input[type="tel"]');

					$.each($phoneInputs, function() {
						var val = $(this).val()

						var valSplit = val.split(" ");
						var replaceCurrentCode = valSplit.length <= 2 && (valSplit.length == 2 ? valSplit.pop() == "" : true);

						//When input is empty or only country code is entered
						if (val.length == 0 || replaceCurrentCode) {
							$(this).val("+" + result.callingCodes[0] + " ");
						}
					});
				}
			});
		});
	};

	//Bind on change event, so that country code is updated
	$(".select-land").on("change", function() {
		setCountryCode($(this));
 	});

	//Update the country code for the country currently selected
 	setCountryCode($(".select-land"));
}

//Auto fills the country calling code using the API provided by brreg.no
function checkAndAutoFillFromOrgNr($orgNrInput) {

	//Get the hidden validation input and error message
	var $errorMessage = $orgNrInput.parent().find(".digiforms_validation_message");
	var $validationField = $orgNrInput.closest(".input-panel").find("#orgnumber-valid");

	var orgNr = removeWhiteSpaces($orgNrInput.val());
	if (orgNr.length == 9) {
		var $formGroup = $orgNrInput.closest(".form-group");

		//Company name
		var $companyNameInput = $formGroup.find(".input-company-name");
		var companyName = "";

		//Mail address
		var $countryInput = $formGroup.find(".select-land");
		var country = $countryInput.val();
		var $streetInput = $formGroup.find(".input-street");
		var street = "";
		var $postalCodeInput = $formGroup.find(".input-postalcode");
		var postalCode = "";
		var $placeInput = $formGroup.find(".input-place");
		var place = "";

		//Start loading animation
		startLoadingAnimation($companyNameInput);
		startLoadingAnimation($countryInput);
		startLoadingAnimation($streetInput);
		startLoadingAnimation($postalCodeInput);
		startLoadingAnimation($placeInput);

		//First try in the "unit API" (no: "enhetsregisteret")
		$.getJSON("https://data.brreg.no/enhetsregisteret/enhet/" + orgNr + ".json", function(result) {
			if (result.status != 400) {

				//Store data returned by the API
				companyName = result.navn;
				country = result.forretningsadresse.landkode;
				street = result.forretningsadresse.adresse;
				postalCode = result.forretningsadresse.postnummer;
				place = result.forretningsadresse.poststed;

				//Set error message text and value for hidden validation inputs
				clearErrormessage($placeInput);
				clearErrormessage($orgNrInput);
				$validationField.val("true");
			}
		}).fail(function(jqxhr) {
				//If the first request failed we try the next API "sub units" (no: "underenheter")
		    if (jqxhr.status == 404) {
					$.getJSON("https://data.brreg.no/enhetsregisteret/underenhet/" + orgNr + ".json", function(result) {
						if (result.status != 400) {

							//Store data returned by the API
							companyName = result.navn;
							country = result.beliggenhetsadresse.landkode;
							street = result.beliggenhetsadresse.adresse;
							postalCode = result.beliggenhetsadresse.postnummer;
							place = result.beliggenhetsadresse.poststed;

							//Set error message text and value for hidden validation inputs
							clearErrormessage($placeInput);
							clearErrormessage($orgNrInput);
							$validationField.val("true");
						}
						else {
							//Set error message text and value for hidden validation input
							$errorMessage.text("Ugyldig organisasjonsnummer");
							$validationField.val("false");
						}

						//Remove loading animation
						endLoadingAnimation($companyNameInput);
						endLoadingAnimation($countryInput);
						endLoadingAnimation($streetInput);
						endLoadingAnimation($postalCodeInput);
						endLoadingAnimation($placeInput);

						//Auto fill with data from API
						$companyNameInput.val(companyName);
						$countryInput.val(country);
						$streetInput.val(street);
						$postalCodeInput.val(postalCode);
						$placeInput.val(place);
					});
			   }
			   else {
						//Remove loading animation
						endLoadingAnimation($companyNameInput);
						endLoadingAnimation($countryInput);
						endLoadingAnimation($streetInput);
						endLoadingAnimation($postalCodeInput);
						endLoadingAnimation($placeInput);

						//Auto fill with data from API
						$companyNameInput.val(companyName);
						$countryInput.val(country);
						$streetInput.val(street);
						$postalCodeInput.val(postalCode);
						$placeInput.val(place);

						//Set error message text and value for hidden validation input
			    	$errorMessage.text("Ugyldig organisasjonsnummer");
			    	$validationField.val("false");
		    }
			}).always(function() {
					//Remove loading animation
					endLoadingAnimation($companyNameInput);
					endLoadingAnimation($countryInput);
					endLoadingAnimation($streetInput);
					endLoadingAnimation($postalCodeInput);
					endLoadingAnimation($placeInput);

					//Auto fill with data from API
					$companyNameInput.val(companyName);
					$countryInput.val(country);
					$streetInput.val(street);
					$postalCodeInput.val(postalCode);
					$placeInput.val(place);
			});
	}
	else { //Adjust error message and hidden validation input
		if (orgNr.length > 0) $errorMessage.text("Må være 9 siffer");
		else $errorMessage.text("Må fylles ut");
		$validationField.val("false");
	}
}

//Binds events to input that is to auto fill other initInputs
//based on an organization number
function autoFillFromOrgNr() {
	$(".input-org-number").on("change paste input", function() {
		checkAndAutoFillFromOrgNr($(this));
	});
}

//Binds all events that calls external APIs
function bindEventsThatCallsExternalAPIs() {
	autoFillPostalCode();
	autoFillCountryCallingCode();
	autoFillFromOrgNr();
}

//Removes whitespaces from a given string
function removeWhiteSpaces(str) {
	var subStrings = str.split(" ");
	var newStr = "";
	for(var i=0; i < subStrings.length; i++) {
		newStr += subStrings[i].trim();
	}
	return newStr;
}

//Removes a substring from the given string
function removeSubstr(str, subStr) {
    if (str != undefined && str.indexOf(subStr) > -1) {
        str = removeSubstr(str.replace(subStr, ""), subStr);
    }
    return str;
}

//Validation using the algorithm MOD11
function validationMOD11(val, weightNumber, ignoreLength) {
	var number = removeWhiteSpaces(val);

	//1. Sum up all the products of multiplying
	//each digit with the corresponding weight number
	var sum = 0;
	for(var i=0; i < number.length - 1; i++) {
		sum += number.charAt(i) * weightNumber.charAt(i);
	}

	//2. Calculate the reminder using modulo 11
	var reminderMOD11 = sum % 11;

	//3. Calculate control number (norwegian account numbers/social sequrity numbers can't have a reminder of 1)
	var calculatedControllNumber = reminderMOD11 == 0 ? 0 : 11 - reminderMOD11;

	//4. Check if the calculated control number is equal to the one entered by the user
	if (calculatedControllNumber != number[number.length - 1] && (ignoreLength || number.length == 11)) {
		return false;
	}
	else if (ignoreLength || number.length == 11) {
		return true;
	}
	else {
		return false;
	}
}

//Custom validation for certain inputs
function validation() {

	//Returns the corresponding hidden input used for validation
	var findMyHiddenBrother = function($input) {
		var $validationField = $input.closest(".label_control").parent().parent().find("input[type=hidden]:first");
		return $validationField;
	}

	//Validation for norwegian account numbers
	var validateAccountNo = function($element) {
		if ($element.val().length > 0 && $element.val().length < parseInt($element.attr("maxlength"))) {
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Må være 11 siffer");
		}
		var valid = validationMOD11($element.val(), "5432765432", false);
		var $validationField = findMyHiddenBrother($element);
		$validationField.val(valid);
		if (valid) {
			clearErrormessage($element[0]);
		}
		else if (!valid && $element.val().length == parseInt($element.attr("maxlength"))) {
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Ugyldig kontonummer");
		}
	}

	var $accountInputs = $("input.numeric-text.account-mask");
	$accountInputs.on("change", function() {
		validateAccountNo($(this));
	});

	$.each($accountInputs, function() {
		validateAccountNo($(this));
	});

	//Validation for VPS account numbers
	var validateVPS = function($element) {
		var valTrimmed = removeWhiteSpaces($element.val());
		var $validationField = findMyHiddenBrother($element);

		if (valTrimmed.length == 12) {
			$validationField.val(true);
			clearErrormessage($element[0]);
		}
		else {
			$validationField.val(false);
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			if (valTrimmed.length > 0) {
				$errorMessage.text("Må være 12 siffer");
			}
		}
	}
	var $vpsAccountInputs = $("input.numeric-text.vps-account-mask");
	$vpsAccountInputs.on("change", function() {
		validateVPS($(this));
	});

	$.each($vpsAccountInputs, function() {
		validateVPS($(this));
	});

	//Validation for norwegian input social security numbers
	var validateSocialSecurityNumberNo = function($element) {
		var $validationField = findMyHiddenBrother($element);
		if($element.val().length > 0 && $element.val().length < parseInt($element.attr("maxlength"))) {
			$validationField.val(false);
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Må være 11 siffer (DDMMÅÅXXXXX)");
		}
		else {
			var valid1 = validationMOD11($element.val().substring(0, 10), "376189452", true); //1st Kontrollsiffer
			var valid2 = validationMOD11($element.val(), "5432765432", false); //Second control number
			$validationField.val(valid1 && valid2);
			if(!(valid1 && valid2) && $element.val().length > 0) {
				var $errorMessage = $element.parent().find(".digiforms_validation_message");
				$errorMessage.text("Ugyldig fødselsnummer");
			}
		}
	}

	var $socialSecurityNumberNoInputs = $("input.input-social-security-number-no");
	$socialSecurityNumberNoInputs.on("change", function() {
		validateSocialSecurityNumberNo($(this));
	});

	$.each($socialSecurityNumberNoInputs, function() {
		validateSocialSecurityNumberNo($(this));
	});

	//Checks and sets validationmessage depending on feedback from
	//external API (brreg in this case)
	var $orgNumberInputs = $(".input-org-number");
	if($orgNumberInputs.length) checkAndAutoFillFromOrgNr($orgNumberInputs);

	//Validate LEI-number
	var validateNValidateInputs = function($element) {
		var $validationInput = findMyHiddenBrother($element);
		var valTrimmed = removeWhiteSpaces($element.val());
		if(valTrimmed.length == parseInt($element.attr("maxlength"))) {
			$validationInput.val(true);
		}
		else if(valTrimmed.length > 0) {
			$validationInput.val(false);
			var $errorMessage = $element.parent().find(".digiforms_validation_message");
			$errorMessage.text("Må være 20 tegn");
		}
		else {
			$validationInput.val(false);
		}
	}

	var $nValidateInputs = $("input.n-validate");
	$nValidateInputs.on("change", function() {
		validateNValidateInputs($(this));
	});

	$.each($nValidateInputs, function() {
		validateNValidateInputs($(this));
	});

	//Run validation on submit
	$("#knapp_neste").on("click", function() {
		//Validate account numbers
		$.each($accountInputs, function() {
			validateAccountNo($(this));
		});

		//Validate VPS account numbers
		$.each($vpsAccountInputs, function() {
			validateVPS($(this));
		});

		//Validate social security numbers
		$.each($socialSecurityNumberNoInputs, function() {
			validateSocialSecurityNumberNo($(this));
		});

		//Validate lei-number
		$.each($nValidateInputs, function() {
			validateNValidateInputs($(this));
		});
	});
}

//Gets the first error in the form
function getFirstError($root) {
	return $root.find(".digiforms_validation_message:first");
}

//Scrolls the first error into view
function scrollToFirstError() {

	//Don't mess with the scrolling incase the URL links to
	//an element on the page (e.i error links on the last page)
	if (window.location.href.indexOf("#") < 0) {
		var $firstError = getFirstError($("body")).closest(".label_control").parent();

		//Check if the error is linked to an input
		if (!$firstError.length) {
			//If not, it's linked to a fieldset. And we look for that instead.
			$firstError = $(".digiforms_validation_message:first").closest("fieldset");
		}
		scrollTo($firstError, 1000);
	}
}

//Initalizes file download links
function initFileDownloadLinks() {
	var sessionTag = $("#frm").attr("action").split("?")[1];
	$.each($(".file-download"), function() {
		$(this).attr("href", $(this).attr("href") + sessionTag);
	});
}

//Sets WAI-ARI for (auto generated) file download buttons (for accessibility)
function setAriaAttributesForFileDownloadButtons() {
	$.each($(".file-download"), function() {
		$(this).attr("aria-label", "Åpne");
	});
}

//Adjusts (auto generated) error message for file uploads.
//Translated to norwegian in this case
function adjustErrorMessagesForFileUpload() {
	var $errorMsgContainer = $("label[for='vedlegg-btn']").parent().siblings("div:first");
	if($errorMsgContainer.length) {
		$errorMsgContainer.css("margin-top", "5px");
		var $errorMsgText = $errorMsgContainer.find("span.digiforms_validation_message");
		var allowedValues = $errorMsgText.text().substring($errorMsgText.text().indexOf("[") + 1, $errorMsgText.text().indexOf("]")).trim();
		if($errorMsgText.text().indexOf("File type") >= 0) {
			$errorMsgText.text("Beklager, filtypen er ikke støttet! Vi trenger en av følgende filtyper: " + allowedValues + ".");
		}
		else if ($errorMsgText.text().indexOf("File is") >= 0) {
			$errorMsgText.text("Beklager, filen er for stor! Den kan ikke være større enn " + allowedValues + ".");
		}
	}
}

//Initalizes file downloads
function initFileUpAndDownloads() {
	initFileDownloadLinks();
	setAriaAttributesForFileDownloadButtons();
	adjustErrorMessagesForFileUpload();

	//Sets WAI-ARI for (auto generated) file upload button (for accessibility)
	$("#button_upload_updatexml").attr("aria-hidden", "true");
}

//Sets WAI-ARI for (auto generated) delete buttons (for accessibility)
function setAriaAttributesForDeleteButtons() {
	$.each($(".btn-delete"), function() {
		var $deletableElement = $(this).closest(".deletable");
		var $description = $deletableElement.find(".aria-description");
		var $item;
		if ($(this).closest(".load-container").length) {
			var n = $(this).attr("id").substring($(this).attr("id").indexOf("_"));
			$item = $deletableElement.find("#rettighetshaver" + n);
		}
		else {
			$item = $description.find(".item");
		}
		if ($item.length) {
			$(this).attr("aria-controls", $item.attr("id"));
			$(this).attr("aria-describedby", $description.attr("id"));
		}
	});
}

//Initalizes delete buttons
function initDeleteButtons() {
	//Set WAI-ARI (for accessibility)
	setAriaAttributesForDeleteButtons();

	//Alters the (auto generated) onclick attribute so that necessary actions
	//Can be performerd before doing the AJAX call
	//This is to make the deletion a bit more understandable to the user (gives better feedback)
	//and make it possible to scroll newly added element into view
	$.each($(".load-container .btn-delete"), function() {
		if ($(this).attr("onclick").indexOf("var callback") > -1) {
			return;
		}
		var correspondingAccordionId = $(this).attr("aria-controls");
		var callback = $(this).attr("onclick").replace("javascript:", "");
		$(this).attr("onclick", "var callback = function () { " + callback + "};scrollToElementAddedByAJAX = false; $('#" + correspondingAccordionId + "').parent().fadeOut(400, callback); ");
	});
}

//Disables add buttons when maxium number of
//elements has been added
function disableAddButtonsWhenMaxIsReached() {
	var $loadContainer =  $(".load-container.max-6");
	if($loadContainer.find(".accordion-container").length > 5) {
		$loadContainer.siblings(".add-content").prop("disabled", true);
		if(!$("#button-disabled-description").length) {
			//Show info text
			//As per now we only have one of these (so the message is hard coded) - should be modified if a more generic functionallity is needed
			$loadContainer.append("<p id='button-disabled-description' class='text-center'><strong>Du kan ikke legge til flere rettighetshavere.</strong></p>");
		}
	}
	else {
		//Disable the add button
		$loadContainer.siblings(".add-content").prop("disabled", false);
	}
}

//Initalizes elements that triggers an AJAX update
function initAJAXUpdateElements() {

	//Alters the (auto generated) onchange attribute so that necessary actions
	//Can be performerd before doing the AJAX call
	//This is to make it possible to scroll newly added element into view
	$.each($(".triggers-ajax-update-scroll-to-first"), function() {
		var doBeforeOnchange = "scrollToElementAddedByAJAX = true;";
		if($(this).attr("onchange").indexOf(doBeforeOnchange) > -1) {
			return;
		}
		var newOnchange = doBeforeOnchange + $(this).attr("onchange").replace("javascript:", "");
		$(this).attr("onchange", newOnchange)
	});
}
